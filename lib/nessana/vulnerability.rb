module Nessana
	class Vulnerability < Hash
		attr_reader :detections

		def initialize(plugin_id, cve, cvss, risk, name, synopsis, description, solution, see_also, plugin_output)
			self[:plugin_id] = plugin_id
			self[:cve] = cve
			self[:cvss] = cvss
			self[:risk] = risk
			self[:name] = name
			self[:synopsis] = reformat_multiline(synopsis)
			self[:description] = reformat_multiline(description)
			self[:solution] = reformat_multiline(solution)
			self[:see_also] = reformat_multiline(see_also)
			self[:plugin_output] = plugin_output
		end

		def add_detection(detection)
			@detections ||= []
			@detections.push(detection)
		end

		def to_s
			return "[Nessus #{self[:plugin_id] || "???"}] #{self[:name] || "Unknown Vulnerability"} (#{self[:risk] || "Unknown Risk"})

#{self[:cve] ? "CVE: " + self[:cve] : "No CVE."}
#{self[:cvss] ? "CVSS: " + self[:cvss] : "No CVSS."}

SYNOPSIS:
#{self[:synopsis]}

DESCRIPTION:
#{self[:description]}

SOLUTION:
#{self[:solution]}

SEE ALSO:
#{self[:see_also]}"
		end

		def matches?(filters = [])
			filters.each do |filter|
				return true if filter.applies_to?(self)
			end

			false
		end

		# TODO Replace with something not O(2 n)? [n = line count]
		def reformat_multiline(multiline)
			multiline.split("\n").map do |line|
				line.length == 0 ? "\n\n" : line
			end.join(' ').gsub(/^ /,'').gsub(/ {3,}/,' ')
		end
	end
end
