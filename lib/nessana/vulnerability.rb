module Nessana
	class Vulnerability
		attr_reader :plugin_id, :cve, :cvss, :risk, :name, :synopsis, :description, :solution, :see_also, :plugin_output
		attr_accessor :detections

		def initialize(plugin_id, cve, cvss, risk, name, synopsis, description, solution, see_also, plugin_output)
			@plugin_id = plugin_id
			@cve = cve
			@cvss = cvss
			@risk = risk
			@name = name
			@synopsis = reformat_multiline(synopsis)
			@description = reformat_multiline(description)
			@solution = solution
			@see_also = see_also
			@plugin_output = plugin_output
		end

		def add_detection(detection)
			@detections ||= []
			@detections.push(detection)
		end

		def to_s
			return "#{title_line}\n\n#{@synopsis}\n\n#{@cve ? "CVE: " + @cve : "No CVE."}\n#{@cvss ? "CVSS: " + @cvss : "No CVSS."}\n\nDESCRIPTION:\n#{@description}\n\nSOLUTION:\n#{@solution}\n\nSEE ALSO:\n#{@see_also}"
		end

		def matches?(filters = [])
			filters.each do |filter|
				return true if filter.applies_to?(self)
			end

			false
		end

		def title_line
			"[Nessus #{@plugin_id || "???"}] #{@name || "Unknown Vulnerability"} (#{@risk || "Unknown Risk"})"
		end

		def short_description
			"#{title_line}
#{@synopsis}"
		end

		protected

		# TODO Replace with something not O(2 n)? [n = line count]
		def reformat_multiline(multiline)
			multiline.split("\n").map do |line|
				line.length == 0 ? "\n\n" : line
			end.join(' ').gsub(/^ /,'').gsub(/ {3,}/,' ')
		end
	end
end
